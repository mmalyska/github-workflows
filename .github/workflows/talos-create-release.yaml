---
name: Create new Talos assets release

on:
  workflow_call:
    inputs:
      repositoryName:
        description: "Repository name"
        required: true
        type: string
      containerRegistryName:
        description: "Container registry name"
        required: true
        type: string
      containerRegistryUsername:
        description: "Container registry username"
        required: true
        type: string
      containerRepositoryName:
        description: "Container repository for image"
        required: true
        type: string
      talosExtensionsImage:
        description: "Talos extensions"
        required: true
        type: string
      archList:
        description: "List of architectures to build"
        default: '[ "amd64", "arm64" ]'
        required: false
        type: string
      pushToRegistry:
        default: true
        type: boolean
        required: false
      createRelease:
        default: true
        type: boolean
        required: false
    secrets:
      containerRegistryPassword:
        description: "Container registry password"
        required: true

jobs:
  check-release:
    uses: mmalyska/github-workflows/.github/workflows/talos-check-new-image.yaml@main
    with:
      repositoryName: ${{ inputs.repositoryName }}
  build-release:
    strategy:
      matrix:
        arch: ${{ fromJSON(inputs.archList) }}
    needs: [ check-release ]
    if: ${{ needs.check-release.outputs.newTalosReleaseFound == 'true' }}
    uses: mmalyska/github-workflows/.github/workflows/talos-build-image.yaml@main
    with:
      talosVersion: ${{ needs.check-release.outputs.talosReleaseTag }}
      talosExtensionsImage: ${{ inputs.talosExtensionsImage }}
      arch: ${{ matrix.arch }}
  create-release:
    if: ${{ inputs.createRelease }}
    needs: [ build-release, check-release ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download build asset images
        uses: actions/download-artifact@v4
        with:
          name: talos-images
          path: /tmp/talos-images
      - name: Create a new release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-release.outputs.talosReleaseTag }}
          body: ${{ needs.check-release.outputs.talosReleaseBody }}
          files: |
            /tmp/talos-images/*
  push-images:
    if: ${{ inputs.pushToRegistry }}
    needs: [ build-release, check-release ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download build asset images
        uses: actions/download-artifact@v4
        with:
          name: talos-installer
          path: /tmp/talos-installer

      - name: Log in to the Container registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ inputs.containerRegistryName }}
          username: ${{ inputs.containerRegistryUsername }}
          password: ${{ secrets.containerRegistryPassword }}
      
      - name: Import and push image
        run: |
          ARRAY=$(echo '${{ inputs.archList }}' | jq -r '.[]')
          for ARCH in $ARRAY
          do
            docker load --input /tmp/talos-installer/installer-$ARCH.tar
            docker tag ghcr.io/siderolabs/installer:${{ needs.check-release.outputs.talosReleaseTag }} ${{ inputs.containerRegistryName }}/${{ inputs.containerRepositoryName }}:${{ needs.check-release.outputs.talosReleaseTag }}-$ARCH
            docker rmi ghcr.io/siderolabs/installer:${{ needs.check-release.outputs.talosReleaseTag }}
            docker push ${{ inputs.containerRegistryName }}/${{ inputs.containerRepositoryName }}:${{ needs.check-release.outputs.talosReleaseTag }}-$ARCH
            AMENDPARAMS="${AMENDPARAMS} --amend ${{ inputs.containerRegistryName }}/${{ inputs.containerRepositoryName }}:${{ needs.check-release.outputs.talosReleaseTag }}-$ARCH"
          done
          docker manifest create ${{ inputs.containerRegistryName }}/${{ inputs.containerRepositoryName }}:${{ needs.check-release.outputs.talosReleaseTag }} $AMENDPARAMS
          for ARCH in $ARRAY
          do
            docker manifest annotate ${{ inputs.containerRegistryName }}/${{ inputs.containerRepositoryName }}:${{ needs.check-release.outputs.talosReleaseTag }} ${{ inputs.containerRegistryName }}/${{ inputs.containerRepositoryName }}:${{ needs.check-release.outputs.talosReleaseTag }}-$ARCH --arch $ARCH --os linux
          done
          docker manifest push --purge ${{ inputs.containerRegistryName }}/${{ inputs.containerRepositoryName }}:${{ needs.check-release.outputs.talosReleaseTag }}
      
      - name: Clean up unused images
        run: |
          ARRAY=$(echo '${{ inputs.archList }}' | jq -r '.[]')
          for ARCH in $ARRAY
          do
            docker rmi ${{ inputs.containerRegistryName }}/${{ inputs.containerRepositoryName }}:${{ needs.check-release.outputs.talosReleaseTag }}-$ARCH
          done
